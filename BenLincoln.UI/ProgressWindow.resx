<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        IABvKwBuJQCCOQCHSwCQVwCVVwBrNwBbKgBgMQBfMQBvPwBpNQBoMQCFSAB4NwB2QQCDRgCMVACQUQCK
        TgCGUACMSgCbVACPTgCaUwCgYwCmeQCplACtuACz1wCzli7Hn35XOhxSNwC10wCwwACpnQCnfACndgCv
        cACrYwCnTQCmVACoVwC8cQC6bQC0ZgC9fQC+fQC5fQC6egC2egGMQQCHQQCBNwB9MgCCQQCUTQCPSwCT
        RwCKQgB/PwBiKgByKQCDOgCAQwCGTACKTgCLSwCZWQBjNwBRIwBSKABbMABxQwCFUQCMVQCMWACSWQCZ
        ZACWZACVYwCPTACHRgCKUACKQQCPSACXTgCmWgCkYgCpcgCnjQCsswC00QCyxw+yhVB5VzAqDwCOlAC3
        zACytACwlwCxgwCucQCqbwCmSwCrVgC2ZwC9aAC6ZwC+dwC/kgC4gwCvewCubwCwcQGLQQCJQwCHOwB3
        MwB+OwCRTwCHTQCUUgCeVACXTwCTRwCSQACGSACCTgB2QgB+SACGSQCITABrPwBYLQBlOQCNXQCJWgCP
        WwCYXgCZXwCWWwCRVACWWQCaXACRTQCRUQCSUgCRSQCSSACiTgChVQChXQCeaQCfiACxrgC1yQCvywSW
        YCuPaj85GwF4dgC81AC0ugCymwC5iACzeACueQCqTwCzYwDGhgDEgQC+bgDFhwDDiQC3cwCyfwC2dQC6
        cQCXVACJQQCORACIQwCEPwCLTgCNTwCLUwCJTgCMTACfVgCJPgBkMAB5OwBwQABwRgB2QwB4RwB1SACR
        XgCiagCmbgCmbwChawCXYQCbYACRVgCVWQCWVwCTUwCUWwCZYwCQVwCOTACaSACfTgCcUgCaWACbaQCp
        jACspQCyxACuyAWUXCuVcEJIJgKGgwC81ACxuACxnQC4kgC5jwC8kwDBdwDChwDEjwC9jQC9hwDFjgDM
        jgC+fgC+iwDBhQC5dwGPSACMQwCNRQCTSwCBSACAQQCZSwCSTgCHSgCKTACQUwCBTQCJVgCFUwCWYQCm
        agCjZgCdZQCeaQCmcQCcbACZZQCbaQCfbACZaQCTXwCEUQCLVwCVWwCVWwCXXQCOTACPTQCUTgCdUwCm
        YACtbQCcZACkdQCwlgCjoQCwwACvyAWOXCiHXzA3GgBbQAC0yQCzvQCxogC0kwC1mwDBmwDLjwDIlQDL
        lgDEjAC+jADFjwDEjwDJmgDOmgDDigC1kwGGPQCPRgCPRQCYTwCVSgCbSwChTACjVACTUQCOUQCdWwCZ
        ZQCtcACfagCoagCsZwCkZwCgZACjaQCYYgCTYgCWYwCWYwCZaACncACYYQCATwCMVgCQWwCVZACgaACM
        SQCPTQCbVwCvcAC4ewCucACZbACwiwC2ngCoqACyyQCxzQaMWSGKWylKLQs2DgCisQC4xwCyrQC2ogC6
        owDBkgDBjwDHkwDNlgDJlwDFmQDKmgDDkQDFnQDNngDHhwC4jgGTRgCZTwCaSACeTACmUQCfUwCcVgCj
        XAClWwCkWQCwZACyagChZACkZACpXACxWQCoYACbYACiZwCgZQCjZwCjawCZZgCaZwCWZQCRWwCUXQCq
        bACXYACRXwCjcwCcZgCZYwCmagCxbwCiYQCZWwCtggC4nAC5rgC3xQC73QC0zASLWw2NZCRcPhdDHwCp
        vgC90gC5xAC7uwDBrgC/jQDAkQDAkQC/kQDInADHoQDLoQDHmADEmgDLowDMnADCiwCVQwCRPwCNOgCO
        OwCrVQCkXQCqYAC0YwC1YgCnXgCrZQCtYgCtYACkWACkUwCsUwCqXQCpZACwbgC6dQC6dQC3dQClbACY
        YwCOWwCcZQC2egDDgAC9egClZwCtfQCxfwCjcACtdACwbQCaWgCmbwC+mwC5pQCztQC60wC75ACjkgl+
        WgaLbR1kRw9NMgCqxAC91gC7xAC+vwDArwC3igC5igC5jgDAjwDImgDDngDJnwDInADHmwDDnwDLogDF
        kAGXQACQPACPOwCUQQCdUACfXACdVACnVgCwXwCoYACpZACsXQCrXwClYACnYgCsXQCmWQCpXgCpYQCy
        bAC6cwC6cgC0dQCrbgCfYAC1eQC7ggC8gACxeQCobgCteQCmdgCkcACvfgCwcwCdYgCtfgCylwC4rgC8
        xwC62AC64QGOdQd/WA2RcS1jRAZzTgC3zAHC2gC+xwC/wwC7sgC7jQDBlADHkwDJkQDGnAC+mwDFnQDI
        nwDCmwDIngDQnQDDlAGUSQCVTgCYTACnXACiWQCcTwCWTwChVQCpYgCsZgCoYwClXACoYgCwZQCtYQCo
        WwCkWgCnYgChXwCoZAC2dACxeQCvcwC4dwCxdwCygQC3gQCzeQCndQCnewCndACufACufwC5iwDDkgCz
        hQCykQC7qADCwwC80gC+5QCqsANySAKCYQqHaBtWOACThgHC6AHE2gDAygC+xgDBtgDLjwDNmQDHlwDB
        lgDDmgC/mQDFnADBnADBnADMoADRmQDEnAGqaACsZwCvbwCoZgCgVwCiVACmVwCoXQCkXgCnYwCqZgCn
        ZwCiYACrZgCsWAClWACgYQCgVgCdWQCycwC0eACycQCyaQC1cwC0hACtgwC6hAC0gQC0hQCzfQCygADB
        kQDEkwDHmgDOpQDJqADAqgC/vQC5yQC73gC/5gGUdgRsTwCFZRBpTgdHLgCOkgDD5QDE2QC9xwC8xQDH
        ugDRlQDHlADAmADAmQDBmgDBmADEnADEmwDFmQDFnADLmADAlAGrZwCuYwC5cwCsaACeUQCjTgCkVgCp
        YwCfVgCiXACsZwCtaQClXACsZACrYgCnWwCeUgCbUQCubAC1eQCrdQCvdQCwcQC+jAC8jwC8jQC+jwC8
        kAC/kAC1gAC3hwDClgC+lQC+mQC4mwCvnQC6sQC6yAC+3wDD7gCrrAF4VgF1WAOOcR9oTwhYOACblAHC
        4QDC1ADCxgDAyADEvgDRlQDPkwDGlQDAlgDDmADFlgDJmADJmwDClQDHmwDJmQC9kQGaVQCnXACuYgCr
        YwCucACqYwCoXQCtZwCiXwCcYQChYQCkXgClXwCuaACucACoagCkXgCoZgC2eQCwcgCrbgC6jgC7jgC8
        jwC8jQC/igC8iwC7iwDFkAC5jQC6kwC/lQC8mgDCpQDGswC6tQC8yADA3QDE7QCqqgBlQwBcQwB2XguA
        ZhVdQwBzVQC0xgG/3ADAywDCwgDExgDLrwDQlQDOlwDMmwDMmADQmQDPlwDDkADClQDCkwDDkwDGlADC
        mQGpagCpXgCrXQCwdQCxfACxegCxbwC0cgCygQCqfACsfACxegCudQC0dAC3dwCwdwCzdQC4eQCtcACu
        bQC7ggDGnADHmQC6iwC9jQC+igC6hwDAjwC/kAC8kgDAnAC+nAC8owDHuADKxwDBzwC/3gDF7ACspwFn
        RgBVQABbRgB4YApvVgZeRQCEZgG84QDA1wDByADCwADCvwDJmADMlQDSnADOmQDRnQDQmwDLlwDHlADQ
        owDRnwDQngDWpADXpgC1dQCzagCwcgCwdgCwbQCwbACwbgC3eQC7hgC5hACxfwC2ggC2dQDAfQC2dwC2
        eAC0cwCudQCscQC0eADImgDCkwDDmAC8jQC7iQC5hwC7jAC5kwC7lQC6lQC/oQC/qwDAtwDCxgDE1QDA
        4ADB7ACopQFmQgBVQABZQwBzWgd4XghbRQBgRQCkqgHB5QDA1QDAxgDEwADDwQDMnADRmwDRmgDPlwDS
        ngDJmADJlADSngDTogDNnQDbqQDgrADcpwCxbgC3aAC3cwC2eAC3dQC2ewC6hwC/ewDAfgDCkAC4hQCw
        fACwdAC4fQC2egCxdQCydgCscwCvdAC5ggDKmgDGlQDFkwC9kgC3kAC4kAC/lgC+lwC6mwC9pQDAswC9
        vQC/yQC/1wDB4wDF7gCopQFjQgBWQQBdRwB2Xw6WeSFxVgNdRwBqSAGyxAHD4QDH1QDGxQDAuwDCwwDM
        ngDPlgDQmQDOlQDXnQDUmgDLlADPnwDLmwDJmwDWqADcrQDVqwHFfgDJfwDBfgDEjQDGlADAkAC9kAC6
        jAC6eQC5gwDFiwC3ggCxgQC4hwC4fgC4egC5eQC0eAC7gwC/iQC+jgDKmwDGlgC+mwC4lADAmgDCogDB
        pQC8rADAuADCxQC+0ADA3QDC6ADB6QCkoABnQwBbRABdSABwWwWmjiidgRaEZwF0VgGWggPA5wDE2wDJ
        ygDIvwDEvwDKsADQmQDSmwDTngDOnADQmwDVnADPmQDKmgDWowDNowDTqQDcrgDYrAHOhADOigDSigDB
        iAC5jAC7igCzggC3fAC4eAC8iADHjwC6iACxiQC5hgC7hAC8hgC8hQDAjwDAmwDEngDDlwC4jAC2kQC8
        oQDBpADEqAC/sQC9ugC/wQC/ygC91gDB4wDE7AC0xwB5XAFQOQBZRABdRwBoUQSSeRmKcgyFbQGKbgWb
        eAe7yQTC4gDD0QDHvwDGugDHugDRogDTnADPnQDZowDZpQDRnQDSnwDQoADLmwDSoQDYqQDVpwDWpQDT
        pwHLfQDRiADbkQDShwDGhADDgwDGhADDgADFjADMmgDOmADLlQDCjgC6jgDBkQDInADBnAC8kQC4lgDD
        pgDMqwC4mwC5pQC9sADAswDBuAC8wQC/zADA1AC+3AC+5ADA4gCYjwFeSABKNgBFNgBPOwBlTAScgC2e
        gRl7YwBrUgCCZQO7ywTC6gDB2QDExgDItgDMuQDPpADMlgDPnQDUngDWmwDVngDVmwDTnQDRoADMnQDR
        oADVogDRoQDNogDLqgHKjADVkgDbmADXlADSkwDXmQDZngDUnADUmwDTnADOmgDSmgDZnwDGmgDJnwDO
        pwDCogC1mAC7ogDAqwDDsQC+tQDBwgC/xQC8xwC9zwC71wDA3wDA5gC86QCqtgB5aQBOMwBDMgBMOgBO
        OwBrVQymjTmigiKPcQSGawR5VwShlQTB7QDD4ADF0ADHvQDKrwDMsQDRpADQmgDVnwDSnADUmgDWnQDV
        mADUmQDYpgDWpgDWpwDZpgDTpQDSqgDVrwHZpgDfqADhpwDgqQDSmgDMmQDQmgDYoADMkwDLlQDUoADQ
        ngDQowDXrADNqgC+pAC8pwDBswDGwgDGxADJzgDH1QDB1gC/2AC+3QDC5QDB6ACzzQCHfABhTgBOMwA9
        KQBLOQBOPQBOPQB+Zxatkja3mS2UdQmIagSKaAalkAi+5ALB4gDF1gDIyADLugDLrwDMrwDQoQDXogDY
        pwDWpADapADZnwDUmADWngDaqwDhsQDfrgDaqQDUowDZqgDcrwDdqwDjqgDlpwDkqwDjqgDUnQDTmwDU
        nwDTnwDZoADZqADVrADRsADQtQDPvADEuQDAvwDIzQDC0ADC1wDA3QC/3wC+4wDD6gC+4wCbngB4dQBW
        OQA9JgAxIgA2KAA/LwBINgBxWQybgC6piimbfA2lhBCmhRGMaAmtlgjC5QLD5QDC2ADFywDLwQDLugDR
        tQDWqADTngDUogDUpgDWqwDgswDjsgDdqADjsADotwDpuQDvvwDdqgDVpADYqQDUqQDgpgDlpwDmpgDi
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>